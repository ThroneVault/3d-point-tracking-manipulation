Fixes & Improvements
- For select_circle routine and subroutines, add messages with how to proceed
or escape functions, as well as improving how to "escape" them, with error
handling and print statements stating if the process was quit/interrupted and
maybe the output if finished.
- Change settings for lines/circles/anything from hardcoded values to
variables fetched from the config file
- Function naming - most of my functions start with get_, better way?
- Go back and, where possible, replace numpy functions with python built-ins
where possible, unless when doing array operations(e.g. add vs np.add)
 - Use monitor sizes and position for more robust window positioning
 - Separate config into two parts -> adjustable variables for user to adjust,
 and other variables that are more set in stone once completed(print messages,
 etc)???
 - Go back and redo print messages and instructions so they are all read from
 config dictionary and make modular if possible(e.g. "<function name> aborted")
 - Ask terminate calibration input at each step(press 'q' to quit?)
 - Make return statements consistent - see PEP8
    - Don't like when a function/method has no return and doesn't auto-indent
    when going down to next function
 - Should I pull calibration methods out as functions and create wrapper
 methods for them??
 - Add blur adjustment to calibration or keep at set value??
 - Change any hardcoded drawing parameters(circle color, weight, etc) to config
  file variables
 - In class methods, define variables locally(e.g. circle = self._circle, etc)
 to reduce clutter and make code look cleaner
 - Standardize waitKey delay
 - In camera calibration, when calibrating all targets, how should I kick the
 calibration back to the camera if ESCing out of the target calibration?
 - cal_funcs list in Target and Camera calibration -> can I use map() instead?
 - Go back and underscore class attributes and methods that aren't used outside
  of their classes
 - Create ASCII dictionary for dealing with keypresses(keypress =
 ascii_dict['esc'] vs keypress = 27)
 - Save calibration data and add checks to ask if you want to recalibrate or
 use existing calibration data, and whether to save data after calibration
 - Find where config dict is used and remove from functions and replace with
 function parameters(use config values when calling functions instead)
 - Consistent messages(quit vs. abort, etc)
 - (UNSURE ABOUT THIS ONE)Pull dictionary parameters from functions and input
 just the values instead to avoid needing a specific data structure as an input
 (e.g. instead of a 'chessboard' dict as inputs with corner spacing and number
 of horiz/vert squares as entries, just have the spacing and squares and
 parameters to the function)
 - Should I restructure certain functions that take different number of inputs?
 e.g. chessboard_cap, which returns corner_list for each cameras.  Have run
 into issues where when using one camera, gets confusing to have to use
 corner_list[0], since the actual data I need is nested in a list.
 - Move windows automatically
 - Check for cameras and find indices automatically?

  BIG TO-DOS:
  - Go back and time program/get FPS with/without threading/multiprocessing
    - Be able to say "Used multiprocessing to do X task Y% faster"


 LESSONS, CHALLENGES & IMPLEMENTATIONS:
 - Unsynchronized stereo webcams.  Solution: Implement threading to create
 separate threads for each camera that constant stream video and allow the
 latest frame to be grabbed.
 - Can't preserve tuple with JSON.  Learned after I needed tuple for function
 parameter but JSON dict was outputting list(chess dimensions for cv2
 .findChessboardCorners)
 - DESIGN -> Use standalone functions vs. class methods where possible for
 code reuse purposes.  Obviously not doable if you need to manipulate class
 attributes within the method/function.  If you want to call a function as a
  class method(e.g. Camera.calibrate), see if you can write as a standalone
  function, then create a class method wrapper than feeds in attributes,
  then sets attributes after function returns required data.
  - Garbage data from stereoCalibrate -> investigate and report!
  - Garbage data from stereoCalibrate: ended up calibrating each camera
  separately to get intrinsic parameters.  Then calibrated the stereo camera
   afterwards.  Was still getting garbage parameters until I did the stereo
   calibration with 1 image(vs. the 20 I was using previously).  I think
   this makes sense as while you need many images to get intrinsic
   parameters, you should really only need one image across both cameras to
   locate them relative to each other.  FINALLY!!!
   - Sometimes get 'Device or resource busy' error, which seems to stem from
    killing camera streams then initializing them rapidly.  I'm guessing
    that when kill_streams function is executed and the streams are stopped,
     since they are running in their own threads, the initialize_stream
     functions may attempt to restart the streams before they are killed.
     SOLUTION: Added stream as attribute of camera class so that the stream is
     started when the camera class in initialized.  This way the stream stays
     active between functions and doesn't need to be stopped and restarted.
     Also, now instead of saving the Camera objects(since the VideoCapture
     object in the stream cannot be pickled(saved)), we just save/load the
     calibration data(cam_mat, dist_coeffs, rot_mat, trans_mat, etc. etc.)

 QUESTIONS FOR SMART PEOPLE:
 -